"""
Django settings for dj_pr project.

Generated by 'django-admin startproject' using Django 3.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
 
from datetime import timedelta
import os

import json
from environ import Env 
from pathlib import Path 

env = Env()
BASE_DIR = Path(__file__).resolve().parent.parent
try:
    with BASE_DIR.parent.joinpath("local.settings.json").open() as f:
        local_settings = json.load(f)
        for key, value in local_settings['Values'].items():
            env.ENVIRON[key] = value
except(IOError, KeyError):
    pass 


SECRET_KEY = 'secret_key'

DEBUG = env.bool('DEBUG',True)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default =[])

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    
        #생성한 앱
    'uploader',
    
    'drf_yasg',
    'rest_framework',
    'rest_framework_simplejwt',
    
    'corsheaders',
    "whitenoise.runserver_nostatic",
    
]

# uploader 앱에서 내가 설정한 User를 사용하겠다고 설정한다.
AUTH_USER_MODEL = 'uploader.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    #'EXCEPTION_HANDLER': 'uploader.exceptions.core_exception_handler',
    'NON_FIELD_ERRORS_KEY': 'error',
}



# 추가적인 JWT_AUTH 설정
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'userIdx',
    'USER_ID_CLAIM': 'userIdx',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    # CORS
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'uploader.middleware.ResponseFormattingMiddleware',
]

ROOT_URLCONF = 'dj_pr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dj_pr.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


DATABASES = {
    'default' : env.db(default=f'sqlite:///{BASE_DIR / "db.sqlite3"}'),
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'ko-kr'
# LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/


## local 
#STATIC_URL = os.environ.get("DJANGO_STATIC_URL", "/static/")  
#STATIC_ROOT = os.environ.get("DJANGO_STATIC_ROOT", "_static")  
STATIC_URL = '/static/'

## azure_ver 
# STATIC_URL = os.environ.get("DJANGO_STATIC_URL", "/static/")  
# # STATIC_ROOT : azure 관련 없음
# STATIC_ROOT = os.environ.get("DJANGO_STATIC_ROOT", "_static")  
# STATICFILES_STORAGE = ('whitenoise.storage.CompressedManifestStaticFilesStorage') ## 배포관련?

# 미디어 경로를 추가
MEDIA_URL = '/media/' 
MEDIA_ROOT = BASE_DIR.parent / 'media'

STATICFILES_STORAGE  = 'dj_pr.storages.StaticAzureStorage'
DEFAULT_FILE_STORAGE  = 'dj_pr.storages.MediaAzureStorage'

AZURE_ACCOUNT_NAME = env.str('AZURE_ACCOUNT_NAME')
AZURE_ACCOUNT_KEY = env.str('AZURE_ACCOUNT_KEY')